// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RemTech.Infrastructure.PostgreSql;

#nullable disable

namespace RemTech.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RemTech.Application.AdvertisementsContext.Models.CharacteristicsManagement.TransportCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("characteristics", (string)null);
                });

            modelBuilder.Entity("RemTech.Domain.AdvertisementsContext.Advertisement", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "RemTech.Domain.AdvertisementsContext.Advertisement.Price#AdvertisementPriceInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Extra")
                                .IsRequired()
                                .HasMaxLength(7)
                                .HasColumnType("character varying(7)")
                                .HasColumnName("price_extra");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("price_value");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Scraper", "RemTech.Domain.AdvertisementsContext.Advertisement.Scraper#AdvertisementScraperInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PublishedBy")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("published_by");

                            b1.Property<string>("ScraperName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("scraper_name");

                            b1.Property<string>("SourceUrl")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("source_url");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Text", "RemTech.Domain.AdvertisementsContext.Advertisement.Text#AdvertisementTextInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id");

                    b.ToTable("advertisements", (string)null);
                });

            modelBuilder.Entity("RemTech.Domain.ParserContext.Entities.ParserProfiles.ParserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<Guid>("ParserId")
                        .HasColumnType("uuid")
                        .HasColumnName("parser_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("state");

                    b.ComplexProperty<Dictionary<string, object>>("Schedule", "RemTech.Domain.ParserContext.Entities.ParserProfiles.ParserProfile.Schedule#ParserProfileSchedule", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long>("NextRunUnixSeconds")
                                .HasColumnType("bigint")
                                .HasColumnName("next_run_unix_seconds");

                            b1.Property<long>("RepeatEveryUnixSeconds")
                                .HasColumnType("bigint")
                                .HasColumnName("repeat_every_seconds");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("ParserId");

                    b.ToTable("parser_profiles", (string)null);
                });

            modelBuilder.Entity("RemTech.Domain.ParserContext.Parser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .IsDescending();

                    b.ToTable("parsers", (string)null);
                });

            modelBuilder.Entity("RemTech.Domain.AdvertisementsContext.Advertisement", b =>
                {
                    b.OwnsOne("RemTech.Domain.AdvertisementsContext.ValueObjects.AdvertisementCharacteristicsCollection", "Characteristics", b1 =>
                        {
                            b1.Property<long>("AdvertisementId")
                                .HasColumnType("bigint");

                            b1.HasKey("AdvertisementId");

                            b1.ToTable("advertisements");

                            b1.ToJson("characteristics");

                            b1.WithOwner()
                                .HasForeignKey("AdvertisementId");

                            b1.OwnsMany("RemTech.Domain.AdvertisementsContext.ValueObjects.AdvertisementCharacteristic", "Characteristics", b2 =>
                                {
                                    b2.Property<long>("AdvertisementCharacteristicsCollectionAdvertisementId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("characteristic_name");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("characteristic_value");

                                    b2.HasKey("AdvertisementCharacteristicsCollectionAdvertisementId", "__synthesizedOrdinal");

                                    b2.ToTable("advertisements");

                                    b2.WithOwner()
                                        .HasForeignKey("AdvertisementCharacteristicsCollectionAdvertisementId");
                                });

                            b1.Navigation("Characteristics");
                        });

                    b.OwnsOne("RemTech.Domain.AdvertisementsContext.ValueObjects.AdvertisementPhotoCollection", "Photos", b1 =>
                        {
                            b1.Property<long>("AdvertisementId")
                                .HasColumnType("bigint");

                            b1.HasKey("AdvertisementId");

                            b1.ToTable("advertisements");

                            b1.ToJson("photos");

                            b1.WithOwner()
                                .HasForeignKey("AdvertisementId");

                            b1.OwnsMany("RemTech.Domain.AdvertisementsContext.ValueObjects.AdvertisementPhoto", "Photos", b2 =>
                                {
                                    b2.Property<long>("AdvertisementPhotoCollectionAdvertisementId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Source")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("photo");

                                    b2.HasKey("AdvertisementPhotoCollectionAdvertisementId", "__synthesizedOrdinal");

                                    b2.ToTable("advertisements");

                                    b2.WithOwner()
                                        .HasForeignKey("AdvertisementPhotoCollectionAdvertisementId");
                                });

                            b1.Navigation("Photos");
                        });

                    b.Navigation("Characteristics")
                        .IsRequired();

                    b.Navigation("Photos")
                        .IsRequired();
                });

            modelBuilder.Entity("RemTech.Domain.ParserContext.Entities.ParserProfiles.ParserProfile", b =>
                {
                    b.HasOne("RemTech.Domain.ParserContext.Parser", "Parser")
                        .WithMany("Profiles")
                        .HasForeignKey("ParserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RemTech.Domain.ParserContext.Entities.ParserProfiles.ValueObjects.ParserProfileLinksCollection", "Links", b1 =>
                        {
                            b1.Property<Guid>("ParserProfileId")
                                .HasColumnType("uuid");

                            b1.HasKey("ParserProfileId");

                            b1.ToTable("parser_profiles");

                            b1.ToJson("Links");

                            b1.WithOwner()
                                .HasForeignKey("ParserProfileId");

                            b1.OwnsMany("RemTech.Domain.ParserContext.Entities.ParserProfiles.ValueObjects.ParserProfileLink", "Links", b2 =>
                                {
                                    b2.Property<Guid>("ParserProfileLinksCollectionParserProfileId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Link")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("ParserProfileLinksCollectionParserProfileId", "__synthesizedOrdinal");

                                    b2.ToTable("parser_profiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ParserProfileLinksCollectionParserProfileId");
                                });

                            b1.Navigation("Links");
                        });

                    b.Navigation("Links")
                        .IsRequired();

                    b.Navigation("Parser");
                });

            modelBuilder.Entity("RemTech.Domain.ParserContext.Parser", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
